/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef } from 'react'
// useGLTF to load GLTF model into the canvas
import { useAnimations, useGLTF } from '@react-three/drei'
import { MeshStandardMaterial, Color } from 'three';
import { useLoader, useFrame } from "@react-three/fiber"
import { TextureLoader } from 'three/src/loaders/TextureLoader'

export default function Model({
  hue,
  saturation,
  lightness,
  uScale,
  vScale,
  textureIndex,
  position = [0, 0, 0],
  modelScale,
  rotation
}) {

  const myMesh = useRef()
  // select which gltf model to load
  const { nodes, animations } = useGLTF('../models/salmon/fish.gltf')
  const { actions, names } = useAnimations(animations, myMesh)
  console.log(actions)

  const textureVector = [
    '../models/salmon/food_0013_height_1k.png',
    "../models/salmon/1.jpeg",
    "../models/salmon/2.jpeg",
    "../models/salmon/3.jpeg"
  ]
  // load texture
  const texture = new TextureLoader().load(textureVector[textureIndex])
  // change the scale of the texture
  texture.repeat.set(uScale, vScale)

  const hslColor = extractColor(hue, saturation, lightness)
  const material = getMaterial(hslColor, texture)

  // const influence = useRef(0);

  useEffect(() => {
    // this is execute after the rendering phase
    //  myMesh.current?.updateMorphTargets();
    // Reset and fade in animation after an index has been changed
    actions[names[0]].reset().fadeIn(0.5).play();
    return () => {
      actions[names[0]].fadeOut(0.5);
    };
  }, [/* actions, names */])
  useFrame(({ clock }) => {

    // in case no animation is found, do not update targets
    /* if (myMesh.current?.morphTargetInfluences) {
      // this is executed at every frame to "render" the frame 
      influence.current = Math.abs(Math.sin(clock.getElapsedTime() * 2))
 
      myMesh.current.morphTargetInfluences[0] = influence.current; 
    }*/
  })

  return (
    <group ref={myMesh} dispose={null} scale={modelScale} position={position} rotation={rotation} >
      {/* TODO set  */}
      <group name="Scene" >
        <group name="Salmon" >
          <skinnedMesh
            name="Salmon_Skin"
            geometry={nodes.Salmon_Skin.geometry}
            material={material}
            skeleton={nodes.Salmon_Skin.skeleton}
          />
          <primitive object={nodes.Root} />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload('/models/salmon/fish.gltf')

// assign the color and the map to the mesh material
function getMaterial(color, image) {
  return (
    new MeshStandardMaterial({
      color: color,
      map: image,
    })
  )
}

// convert color in HSL mode
function extractColor(hue, saturation, lightness) {
  return new Color("hsl(0, 100%, 100%)")
    .setHSL((hue ?? 0) / 360, (saturation ?? 0) / 100, (lightness ?? 0) / 100)
}